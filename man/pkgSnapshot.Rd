% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkgSnapshot.R
\name{pkgSnapshot}
\alias{pkgSnapshot}
\title{Take a snapshot of all the packages and version numbers}
\usage{
pkgSnapshot(
  packageVersionFile = "packageVersions.txt",
  libPaths,
  standAlone = FALSE,
  purge = getOption("Require.purge", FALSE),
  exact = TRUE
)
}
\arguments{
\item{packageVersionFile}{A filename to save the packages and their currently
installed version numbers. Defaults to \code{".packageVersions.txt"}.
If this is specified to be \code{NULL}, the function will return the exact
\code{Require} call needed to install all the packages at their current
versions. This can be useful to add to a script to allow for reproducibility of
a script.}

\item{libPaths}{The path to the local library where packages are installed.
Defaults to the \code{.libPaths()[1]}.}

\item{standAlone}{Logical. If \code{TRUE}, all packages will be installed to and loaded from
the \code{libPaths} only.
If \code{FALSE}, then \code{libPath} will be prepended to \code{.libPaths()} during the \code{Require} call,
resulting in shared packages, i.e., it will include the user's default package folder(s).
This can be create dramatically faster installs if the user has a substantial number of
the packages already in their personal library.
Default \code{FALSE} to minimize package installing.}

\item{purge}{Logical. Should all caches be purged?
Default is \code{getOption("Require.purge", FALSE)}.
There is a lot of internal caching of results throughout the \code{Require} package.
These help with speed and reduce calls to internet sources.
However, sometimes these caches must be purged.
The cached values are renewed when found to be too old, with the age limit.
This maximum age can be set in seconds with the environment variable
\code{R_AVAILABLE_PACKAGES_CACHE_CONTROL_MAX_AGE}, or if unset,
defaults to 3600  (one hour -- see \code{\link[utils]{available.packages}}).

Internally, there are calls to \code{available.packages}.}

\item{exact}{Logical. If \code{TRUE}, the default, then for GitHub packages, it
will install the exact SHA, rather than the head of the account/repo@branch. For
CRAN packages, it will install the exact version. If \code{FALSE}, then GitHub
packages will identify their branch if that had been specified upon installation,
not a SHA. If the package had been installed with reference to a SHA, then it
will return the SHA as it does not know what branch it came from.
Similarly, CRAN packages will
report their version and specify with a \code{>=}, allowing a subsequent user
to install with a minimum version number, as opposed to an exact version number.}
}
\description{
This can be used later by \code{installVersions} to install or re-install the correct versions.
}
\details{
A file is written with the package names and versions of all packages within \code{libPaths}.
This can later be passed to \code{Require}.
}
\examples{
\dontrun{
pkgSnapFile <- tempfile()
pkgSnapshot(pkgSnapFile, .libPaths()[1])
data.table::fread(pkgSnapFile)

# An example to move this file to a new computer
library(Require)
setLibPaths(.libPaths()[1])  # this will only do a snapshot of the main user library
fileName <- "packageSnapshot.txt"
pkgSnapshot(fileName)
# Get file on another computer -- via email, slack, cloud, etc.
# library(googledrive)
# (out <- googledrive::drive_upload(fileName)) # copy the file id to clipboard

# On new machine
fileName <- "packageSnapshot.txt"
library(Require)
# get the file from email, slack, cloud etc.
# library(googledrive)
# drive_download(as_id(PASTE-THE-FILE-ID-HERE), path = fileName)
setLibPaths("~/RPackages") # start with an empty folder for new
                           # library to minimize package version conflicts
Require(packageVersionFile = fileName)

# Passing NULL --> results in output to console with exact Require call to
#   achieve the packages installations
pkgSnapshot(NULL, libPaths = .libPaths()[1], exact = FALSE)

# Or shunt it to a file
sink("packages2.R")
pkgSnapshot(NULL, libPaths = .libPaths()[1])
sink()

# Will show "minimum package version"
pkgSnapshot(NULL, libPaths = .libPaths()[1], exact = FALSE)
}
unlink(tempdir(), recursive = TRUE) # clean up

}
